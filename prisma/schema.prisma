// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id            String         @id @default(uuid())
  name          String
  domain        String
  status        String
  main_color    String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  products      Product[]
  providers     Provider[]
  services      Service[]
  professionals Professional[]
  Review        Review[]
  Favorite      Favorite[]
  Appointment   Appointment[]

  @@map("tenants")
}

model User {
  id          String        @id @default(uuid())
  name        String
  email       String        @unique
  password    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  role        Role?         @relation(fields: [roleId], references: [id])
  roleId      String?
  reviews     Review[]
  favorites   Favorite[]
  Appointment Appointment[]

  @@map("users")
}

model Role {
  id        String   @id @default(uuid())
  name      String   @unique
  user      User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("rules")
}

model Product {
  id     String @id @default(uuid())
  name   String
  price  Float
  amount Int

  provider   Provider? @relation(fields: [providerId], references: [id])
  providerId String?
  tenant     Tenant?   @relation(fields: [tenantId], references: [id])
  tenantId   String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("products")
}

model Provider {
  id             String         @id @default(uuid())
  service_type   String
  name           String
  description    String?
  address        String
  latitude       String
  longitude      String
  photo          String?
  average_rating Float?
  type           String
  tenant         Tenant?        @relation(fields: [tenantId], references: [id])
  tenantId       String?
  products       Product[]
  services       Service[]
  professionals  Professional[]
  reviews        Review[]
  appointments   Appointment[]
  Favorite       Favorite[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("providers")
}

model Service {
  id          String  @id @default(uuid())
  name        String
  description String?
  price       Float
  type        String
  duration    Float

  provider   Provider?  @relation(fields: [providerId], references: [id])
  providerId String?
  tenant     Tenant?    @relation(fields: [tenantId], references: [id])
  tenantId   String?
  Review     Review[]
  Favorite   Favorite[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("services")
}

model Professional {
  id         String  @id @default(uuid())
  name       String
  speciality String?
  bio        String?

  provider   Provider?  @relation(fields: [providerId], references: [id])
  providerId String?
  tenant     Tenant?    @relation(fields: [tenantId], references: [id])
  tenantId   String?
  Review     Review[]
  Favorite   Favorite[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("professionals")
}

model Review {
  id      String  @id @default(uuid())
  rating  Int
  comment String?

  provider       Provider?     @relation(fields: [providerId], references: [id])
  providerId     String?
  service        Service?      @relation(fields: [serviceId], references: [id])
  serviceId      String?
  user           User?         @relation(fields: [userId], references: [id])
  userId         String?
  professional   Professional? @relation(fields: [professionalId], references: [id])
  professionalId String?
  tenant         Tenant?       @relation(fields: [tenantId], references: [id])
  tenantId       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ratings")
}

model Favorite {
  id String @id @default(uuid())

  user           User?         @relation(fields: [userId], references: [id])
  userId         String?
  provider       Provider?     @relation(fields: [providerId], references: [id])
  providerId     String?
  professional   Professional? @relation(fields: [professionalId], references: [id])
  professionalId String?
  service        Service?      @relation(fields: [serviceId], references: [id])
  serviceId      String?
  tenant         Tenant?       @relation(fields: [tenantId], references: [id])
  tenantId       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("favorites")
}

model Appointment {
  id      String   @id @default(uuid())
  starsAt DateTime
  endsAt  DateTime

  user       User?     @relation(fields: [userId], references: [id])
  userId     String?
  provider   Provider? @relation(fields: [providerId], references: [id])
  providerId String?
  tenant     Tenant?   @relation(fields: [tenantId], references: [id])
  tenantId   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("appointments")
}
